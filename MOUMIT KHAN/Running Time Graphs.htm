<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<!-- saved from url=(0064)file:///C:/Tory/Teaching_Algo_Theory/Running%20Time%20Graphs.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   
   <meta name="Author" content="James B. Marshall">
   <meta name="GENERATOR" content="Mozilla/4.73 [en] (Win98; U) [Netscape]">
   <title>Running Time Graphs</title>
</head>
<body>

<center>
<h1>
Algorithmic Complexity and Big-O Notation</h1></center>

<p><br><font size="+2">The graph below compares the running times of various
algorithms.</font>
</p><ul>
<li>
<font size="+2">Linear -- O(<i>n</i>)</font></li>

<li>
<font size="+2">Quadratic -- O(<i>n</i></font><i><sup><font size="+1">2</font></sup></i><font size="+2">)</font></li>

<li>
<font size="+2">Cubic -- O(<i>n</i></font><i><sup><font size="+1">3</font></sup></i><font size="+2">)</font></li>

<li>
<font size="+2">Logarithmic -- O(log <i>n</i>)</font></li>

<li>
<font size="+2">Exponential -- O(2</font><i><sup><font size="+1">n</font></sup></i><font size="+2">)</font></li>

<li>
<font size="+2">Square root -- O(sqrt <i>n</i>)</font></li>
</ul>

<center><img src="./Running Time Graphs_files/running-times.gif" height="620" width="869"></center>

<p><br>
<br>
</p><p>
</p><hr width="100%">
<br><font size="+2">Comparison of algorithms in terms of the maximum problem
size they can handle:</font>
<br>&nbsp;
<br>&nbsp;
<center><table border="" cellpadding="5" cols="4" width="95%" bgcolor="#FFFF99">
<tbody><tr bgcolor="#CCCCCC">
<td align="CENTER"><font size="+2">Algorithm Complexity</font></td>

<td align="CENTER"><font size="+2">Running time T(n)
<br>(measured in seconds on an Apple Delicious computer)</font></td>

<td align="CENTER"><font size="+2">Maximum problem size given 1000 seconds on an Apple Delicious</font></td>

<td align="CENTER"><font size="+2">Computer Speed <font face="Arial,Helvetica">x</font>
10
</font><p><font size="+2">Maximum problem size given 1000 seconds on a Power Delicious (or 10,000 seconds on a classic Delicious)</font></p></td>
</tr>

<tr>
<td><font size="+2">O(n)</font></td>

<td><font size="+2">100n</font></td>

<td><font size="+2">n = 10</font></td>

<td><font size="+2">n = 100 <i>(<font face="Arial,Helvetica">x</font>
10 increase)</i></font></td>
</tr>

<tr>
<td><font size="+2">O(n<sup>2</sup>)</font></td>

<td><font size="+2">5n<sup>2</sup></font></td>

<td><font size="+2">n = 14</font></td>

<td><font size="+2">n = 45 <i>(<font face="Arial,Helvetica">x</font>
3)</i></font></td>
</tr>

<tr>
<td><font size="+2">O(n<sup>3</sup>)</font></td>

<td><font size="+2"><b>½</b> n<sup>3</sup></font></td>

<td><font size="+2">n = 12</font></td>

<td><font size="+2">n = 27 <i>(<font face="Arial,Helvetica">x</font>
2)</i></font></td>
</tr>

<tr>
<td><font size="+2">O(2<sup>n</sup>)</font></td>

<td><font size="+2">2<sup>n</sup></font></td>

<td><font size="+2">n = 10</font></td>

<td><font size="+2">n = 13 <i>(<font face="Arial,Helvetica">x</font>
1.3)</i></font></td>
</tr>

<tr>
<td><font size="+2">O(sqrt n)</font></td>

<td><font size="+2">400 sqrt(n)</font></td>

<td><font size="+2">n = 6</font></td>

<td><font size="+2">n = 625 <i>(<font face="Arial,Helvetica">x</font>
100)</i></font></td>
</tr>

<tr>
<td><font size="+2">O(log n)</font></td>

<td><font size="+2">400 log(n)</font></td>

<td><font size="+2">n = 12</font></td>

<td><font size="+2">n = 72 billion <i>(<font face="Arial,Helvetica">x</font>
6 billion)</i></font></td>
</tr>
</tbody></table></center>

<p><font size="+2">MORAL: Cheaper, faster computers mean bigger problems to solve.</font>
<br><font size="+2">Bigger problems to solve mean efficiency is <i>more</i>
important.</font>
<br>&nbsp;
</p><p>
</p><hr width="100%">
<p><font size="+2">The basic shape of a polynomial function is determined
by the highest valued exponent in the polynomial (called the <i>order</i>
of the polynomial).</font>
</p><center>
<p><img src="./Running Time Graphs_files/polynomials.gif" height="631" width="889">
<br>&nbsp;
</p><p>
</p><hr width="100%"></center>

<p><font size="+2">Multiplicative constants do not affect the fundamental
shape of a curve.&nbsp; Only the steepness of the curve is affected.</font>
<br>&nbsp;
</p><center>
<h2>
<font size="+2">Linear Family</font></h2></center>

<center><img src="./Running Time Graphs_files/linear.gif" height="640" width="832"></center>

<p><br>
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><center>
<h2>
Quadratic Family</h2></center>

<center><img src="./Running Time Graphs_files/quadratic.gif" height="632" width="860"></center>

<p><br>
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><center>
<h2>
Cubic Family</h2></center>

<center><img src="./Running Time Graphs_files/cubic.gif" height="620" width="847">
<br>&nbsp;
<p>
</p><hr width="100%"></center>

<p><font size="+2">Only the <i>dominant terms</i> of a polynomial matter
in the long run.&nbsp; Lower-order terms fade to insignificance as the
problem size increases.</font>
</p><center>
<p><img src="./Running Time Graphs_files/dominant1.gif" height="633" width="864">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/dominant2.gif" height="647" width="901">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/dominant3.gif" height="648" width="894">
<br>&nbsp;
</p><p>
</p><hr width="100%"></center>

<p><font size="+2">The best sorting algorithms (such as mergesort) run in
O(<i>n </i>log <i>n</i>) time.&nbsp; Slower ones (such as bubble sort,
selection sort, and insertion sort), take O(<i>n</i></font><i><sup><font size="+1">2</font></sup></i><font size="+2">)
time.</font>
</p><center>
<p><img src="./Running Time Graphs_files/sorting.gif" height="631" width="880">
<br>&nbsp;
</p><p>
</p><hr width="100%"></center>

<p><font size="+2">Polynomial curves will always overtake logarithmic curves
eventually, when the problem size gets big enough, regardless of the multiplicative
constants involved.</font>
</p><center>
<p><img src="./Running Time Graphs_files/log-vs-cubic1.gif" height="627" width="847">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/log-vs-cubic2.gif" height="641" width="863">
<br>&nbsp;
</p><p>
</p><hr width="100%"></center>

<p><font size="+2">The superiority of the O(log <i>n</i>) Fermat prime test
over the O(sqrt <i>n</i>) prime test becomes clear for really big integers.</font>
</p><center>
<p><img src="./Running Time Graphs_files/primality1.gif" height="620" width="847">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/primality2.gif" height="630" width="854">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/primality3.gif" height="628" width="857">
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</p><p><img src="./Running Time Graphs_files/primality4.gif" height="620" width="847"></p></center>

<p><br>
<br>
<br>
<br>


</p></body></html>